etting & Creating Projects
Command	Description
git init	Initialize a local Git repository
git clone ssh://git@github.com/[username]/[repository-name].git	Create a local copy of a remote repository
Basic Snapshotting
Command	Description
git status	Check status
git add [file-name.txt]	Add a file to the staging area
git add -A	Add all new and changed files to the staging area
git commit -m "[commit message]"	Commit changes
git rm -r [file-name.txt]	Remove a file (or folder)
Branching & Merging
Command	Description
git branch	List branches (the asterisk denotes the current branch)
git branch -a	List all branches (local and remote)
git branch [branch name]	Create a new branch
git branch -d [branch name]	Delete a branch
git push origin --delete [branch name]	Delete a remote branch
git checkout -b [branch name]	Create a new branch and switch to it
git checkout -b [branch name] origin/[branch name]	Clone a remote branch and switch to it
git branch -m [old branch name] [new branch name]	Rename a local branch
git checkout [branch name]	Switch to a branch
git checkout -	Switch to the branch last checked out
git checkout -- [file-name.txt]	Discard changes to a file
git merge [branch name]	Merge a branch into the active branch
git merge [source branch] [target branch]	Merge a branch into a target branch
git stash	Stash changes in a dirty working directory
git stash clear	Remove all stashed entries
Sharing & Updating Projects
Command	Description
git push origin [branch name]	Push a branch to your remote repository
git push -u origin [branch name]	Push changes to remote repository (and remember the branch)
git push	Push changes to remote repository (remembered branch)
git push origin --delete [branch name]	Delete a remote branch
git pull	Update local repository to the newest commit
git pull origin [branch name]	Pull changes from remote repository
git remote add origin ssh://git@github.com/[username]/[repository-name].git	Add a remote repository
git remote set-url origin ssh://git@github.com/[username]/[repository-name].git	Set a repository's origin branch to SSH
Inspection & Comparison
Command	Description
git log	View changes
git log --summary	View changes (detailed)
git log --oneline	View changes (briefly)
git diff [source branch] [target branch]	Preview changes before merging

To squash commits in Git, you can use the interactive rebase feature, which allows you to combine multiple commits into a single commit. Here's a step-by-step guide:

Start Interactive Rebase:

Open your terminal or command prompt.
Use the following command to start an interactive rebase for the last 'N' commits, where 'N' is the number of commits you want to squash:
bash
Copy code
git rebase -i HEAD~N
Replace 'N' with the number of commits you want to squash. For example, to squash the last 3 commits, use git rebase -i HEAD~3.

Edit the Commit List:

After executing the command, a text editor will open, displaying a list of commits and their respective hash IDs.
Each commit line starts with the word "pick" (except for the first one).
Squash Commits:

To squash commits, change the word "pick" to "squash" (or simply "s") for the commits you want to squash into the previous commit.
Leave the word "pick" for the commit you want to retain as the combined commit message.
Save and close the text editor.
Modify Combined Commit Message (if prompted):

After saving and closing the editor, another editor will open (if you squashed multiple commits), allowing you to modify the commit message for the combined commit.
Save and close the editor again.
Finish Rebase:

Git will finalize the rebase, combining the selected commits into one.
If you've modified the commit message, the rebase will complete, and the combined commit will reflect the updated message.
Push the Changes (if necessary):

If the commits were already pushed to a remote repository, you might need to force-push (git push --force) the changes. Be cautious when force-pushing, as it rewrites history.
Remember, rewriting history can impact collaborators if the changes are already pushed to a shared repository. It's recommended to communicate changes and coordinate with team members when modifying shared branches.
